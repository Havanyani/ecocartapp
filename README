# EcoCart - Recycling Rewards App

EcoCart is a sustainability-focused application that helps users schedule plastic waste collection alongside grocery deliveries, track collected materials, earn credits, and redeem rewards.

## Project Architecture

EcoCart is built using:
- **React Native** with **TypeScript** for cross-platform mobile development
- **Expo** for streamlined development, testing, and deployment
- **Expo Router** for file-based navigation and routing
- **Context API** with hooks for state management
- **Zod** for data validation
- **Jest** for comprehensive testing (unit, integration, E2E)

## File Structure

```
ecocartapp/
├── app/                      # Expo Router file-based navigation
│   ├── _layout.tsx           # Root layout and initialization
│   ├── (tabs)/               # Tab-based navigation group
│   │   ├── _layout.tsx       # Tab navigator configuration
│   │   ├── index.tsx         # Home tab screen
│   │   ├── materials.tsx     # Materials tab screen
│   │   ├── collection.tsx    # Collection scheduling tab
│   │   ├── rewards.tsx       # Rewards tab screen
│   │   └── profile.tsx       # User profile tab screen
│   └── [...unmatched].tsx    # 404 not found page
├── src/                      # Source code
│   ├── components/           # Reusable UI components
│   ├── config/               # Configuration files
│   ├── constants/            # Application constants
│   ├── contexts/             # React Context providers
│   ├── hooks/                # Custom React hooks
│   ├── providers/            # Service providers
│   ├── screens/              # Screen components (legacy)
│   ├── services/             # Business logic services
│   ├── types/                # TypeScript type definitions
│   └── utils/                # Utility functions
├── assets/                   # Static assets (images, fonts)
├── app-store-assets/         # Assets for App Store submission
├── docs/                     # Documentation
├── scripts/                  # Build and utility scripts
├── app.json                  # Expo configuration
├── eas.json                  # EAS Build configuration
└── package.json              # Dependencies and scripts
```

## Understanding the Architecture

### Expo Router

EcoCart uses Expo Router for file-based navigation. The app's routing structure is based on the file structure in the `app/` directory:

- Files become routes (e.g., `app/profile.tsx` → `/profile`)
- Folders create nested routes
- Special naming like `[id].tsx` creates dynamic routes
- Files named `_layout.tsx` define layouts for their respective routes
- Groups like `(tabs)` organize routes without affecting URL paths

### App Initialization

With Expo Router:
- `src/App.tsx` is a minimal entry point that imports `expo-router/entry`
- The actual app initialization happens in `app/_layout.tsx`
- Services like OTA updates are initialized in the root layout

### Environment Configuration

EcoCart supports multiple environments (development, staging, production):
- Environment configurations are in `src/config/environments.ts`
- Build profiles are in `eas.json`
- Native code configuration is in `app.json`

## Development

### Prerequisites

- Node.js 18+
- Expo CLI
- Yarn or npm

### Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/ecocart.git
cd ecocart

# Install dependencies
npm install

# Start the development server
npm start
```

### Available Scripts

- `npm start` - Start the Expo development server
- `npm run android` - Run on Android emulator/device
- `npm run ios` - Run on iOS simulator/device
- `npm test` - Run Jest tests
- `npm run build:dev` - Build development version
- `npm run build:prod` - Build production version
- `npm run update:prod` - Push OTA update to production

## Deployment

EcoCart uses Expo Application Services (EAS) for builds and OTA updates.

### Building for App Stores

```bash
# Production build for all platforms
npm run build:prod

# Submit to app stores
eas submit --platform ios
eas submit --platform android
```

### OTA Updates

```bash
# Push update to production
npm run update:prod
```

For more information on deployment, see the [Deployment Guide](./docs/deployment-guide.md).

## Testing

EcoCart has a comprehensive testing strategy:

- **Unit Tests** - Test components, hooks, and services in isolation
- **Integration Tests** - Test multiple components working together
- **E2E Tests** - Test complete user flows using Detox
- **Security Audit** - Check for security vulnerabilities

```bash
# Run all tests
npm test

# Run tests with coverage
npm run test:coverage

# Run security audit
npm run security:audit
```

## Documentation

- [Deployment Guide](./docs/deployment-guide.md) - Detailed deployment instructions
- [Performance Guide](./docs/performance-optimization-guide.md) - Performance best practices
- [Testing Strategy](./docs/testing-strategy.md) - Testing approach and examples

## Contributing

Please see our [Contributing Guidelines](./CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. 